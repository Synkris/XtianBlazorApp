@inject IJSRuntime JsRuntime
@inject NavigationManager NavManager

@page "/counter"
@using BlazorBarcodeScanner.ZXing.JS;
@using System.Text.Json;
@using XtianBlazorApp.Client.Helper;
@using XtianBlazorApp.Shared.ViewModels;
@using System.Text;
@using System.Security.Cryptography;
@using System.Net.Http.Headers;
@using Newtonsoft.Json;


<PageTitle>Dashboard</PageTitle>

<h1><img src="neon-logo-logo-google.jpg" width="50" height="100" class="" alt="Logo" />-sign</h1>

<br>
<br>

<div class="container">
    <div class="row">
        <div class="col-md-4 col-12 col-lg-4 margin-bottom">
            <div class="card card-sm rounded blue">

                <div class="circle blue">
                    <button class="btn btn-light startButtonHandler" onclick="startCamera()">
                        <span class="oi oi-phone icon-margin3">Scan</span>
                    </button>

                    <button class="btn btn-light stopButtonHandler" hidden onclick="stopCamera()">
                        <span class="oi oi-media-stop icon-margin3"></span>Stop
                    </button>
                </div>

                <div class="card-body">

                    <BlazorBarcodeScanner.ZXing.JS.BarcodeReader Title=""
                                                                 StartCameraAutomatically="false"
                                                                 ShowStart="true"
                                                                 ShowReset="true"
                                                                 ShowToggleTorch="false"
                                                                 ShowVideoDeviceList="false"
                                                                 VideoWidth="350"
                                                                 VideoHeight="200"
                                                                 ShowResult="false"
                                                                 OnBarcodeReceived="LocalReceivedBarcodeText" />
                </div>

                <div class="circle-down blue">
                    <button class="btn btn-light badge badge-pill text-color-design" @onclick="DeleteLocalStorageAndReload">
                        <span class="oi oi-trash"></span>
                    </button>
                </div>

                <div class="alert alert-secondary blue blueNotificationSpace whiteWord @scannerHide">
                    <span class="oi oi-circle-check me-2" aria-hidden="true"></span>
                    <strong class="mb-3 whiteWord">@finalScannedResult</strong>
                    <br />
                </div>

            </div>
        </div>


        <div class="col-md-4 col-12 col-lg-4 margin-bottom">
            <div class="card card-sm rounded yellow">
                <div class="col-12 cardBody">


                    <div class="circle yellow">
                        <a href="DetentionForm" class="btn btn-light">
                            <span class="oi oi-pencil icon-margin3"></span>Sign
                        </a>
                    </div>

                    <div class="card-body">
                        <div class="col-sm-6 col-md-3">
                            <br />
                            <img src="@mostRecentSignature">
                        </div>
                    </div>

                    <div class="circle-down yellow">
                        <button class="btn btn-light badge badge-pill text-color-design" @onclick="DeleteLocalStorageAndReload">
                            <span class="oi oi-trash"></span>
                        </button>
                    </div>
                </div>

                <div class="alert alert-secondary col-12 yellow notificationSpace @signHide">
                    <span class="oi oi-circle-check me-2" aria-hidden="true"></span>
                    <strong class="mb-3 whiteWord">Signature Captured successfully</strong>
                    <br />
                </div>

            </div>
        </div>


        <div class="col-md-4 col-12 col-lg-4 margin-bottom">
            <div class="card card-sm rounded green">
                <div class="col-12 cardBody">
                    <div class="circle green">
                        <button class="btn btn-light" @onclick=UploadSignature>
                            <span class="oi oi-data-transfer-upload icon-margin2"></span>Upload
                        </button>
                    </div>

                    <div class="card-body">
                        <br>
                        <br>
                        <h6 class="card-title whiteWord">Click the button above to upload Person's details & signature</h6>
                    </div>
                </div>

                <div class="alert alert-secondary col-12 green notificationSpace @uploadHide">
                    <span class="oi oi-circle-check me-2" aria-hidden="true"></span>
                    <strong class="mb-3 whiteWord"> Person's Details Uploaded Successfully</strong>
                    <br>
                </div>

            </div>
        </div>

    </div>
</div>





@code
{

    private string localBarcodeText = string.Empty;
    private string url = string.Empty;
    private string localUrl = string.Empty;
    private string uatUrl = string.Empty;
    private string productionUrl = string.Empty;
    public string finalScannedResult = string.Empty;
    private string scannerHide = "d-none";
    public string signHide = "d-none";
    private string uploadHide = "d-none";
    public string mostRecentSignature = string.Empty;


    private new async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var signedImg = await JsRuntime.InvokeAsync<string>("getStoreData", "filteredSignature").ConfigureAwait(false);
            if (signedImg != null)
            {
                //string newSignature = signedImg.Substring(0, signedImg.Length - 2);
                string newSignature = signedImg.Replace("'", ""); ;
                mostRecentSignature = newSignature;
                signHide = string.Empty;
            }
        }
    }

    private async void LocalReceivedBarcodeText(BarcodeReceivedEventArgs args)
    {
        this.localBarcodeText = args.BarcodeText;
        StateHasChanged();
        var result = await SaveToLocalStorage().ConfigureAwait(false);
        if (result != string.Empty && result != null)
        {
            finalScannedResult = result;
            scannerHide = string.Empty;
        }
    }

    private async Task<string> SaveToLocalStorage()
    {
        var detaineeName = string.Empty;
        var baseUrlCategory = string.Empty;
        var baseUrlData = JsonConvert.DeserializeObject<UploadUrl>(localBarcodeText);
        if (baseUrlData != null && baseUrlData.URL_PRODUCTION == string.Empty && baseUrlData.URL_LOCAL == string.Empty && baseUrlData.URL_UAT == string.Empty)
        {
            var data = JsonConvert.DeserializeObject<UserData>(localBarcodeText);
            if (data != null && data.A != null)
            {
                var dataObject = new
                {
                    key = "userData",
                    value = localBarcodeText
                };
                await JsRuntime.InvokeVoidAsync("saveDetailsToLocalStorage", dataObject).ConfigureAwait(false);
                detaineeName = data.M;
            }
            detaineeName = " Detained Person :\n" + detaineeName;
            return detaineeName;
        }
        else
        {
            if (baseUrlData.URL_PRODUCTION != null && baseUrlData.URL_PRODUCTION != string.Empty)
            {
                productionUrl = baseUrlData.URL_PRODUCTION;
                url = productionUrl + "signatures";
                baseUrlCategory = " Base url set to PRODUCTION successfully ";
            }
            else if (baseUrlData.URL_LOCAL != null && baseUrlData.URL_LOCAL != string.Empty)
            {
                localUrl = "http://localhost:63813/";// baseUrlData.URL_LOCAL;
                url = localUrl + "signatures";
                baseUrlCategory = " Base url set to LOCAL successfully ";
            }
            else if (baseUrlData.URL_UAT != null && baseUrlData.URL_UAT != string.Empty)
            {
                uatUrl = baseUrlData.URL_UAT;
                url = uatUrl + "signatures";
                baseUrlCategory = " Base url set to UAT successfully ";
            }
            else
            {
                url = baseUrlData.URL_PRODUCTION + "signatures";
                baseUrlCategory = " Base url set to production successfully ";
            }

            var dataObject = new
            {
                key = "baseUrl",
                value = url
            };
            await JsRuntime.InvokeVoidAsync("saveDetailsToLocalStorage", dataObject).ConfigureAwait(false);
            return baseUrlCategory;
        }
    }

    private async Task UploadSignature()
    {
        try
        {
            var apiKey = "qm8nLvw92J89uZBazE9FmHfCjCVaOhqaa6wmr661FhduEom5QZyqmmL3dSTsCkBHJO8eiQ9oO81j8WopzYaSM9jZJhy3Aptt4sLhnEbWl7bRujqbwHTWCzsdBaZmpimFqmjYuE8RDJjKYnIJFkx0oH3U3sbBELDw8tvDzDsTGgnCdoQ7SZOYlhP8xHk2E6hK31xgb0flhBo2HfnQUPo75oRAlyICSg9E42DCQ3gy3p1CKVxa47W4bv7IR3pdr8pC";
            var consentForm = await JsRuntime.InvokeAsync<string>("getStoreData", "consentForm").ConfigureAwait(false);
            var baseUrl = "http://localhost:63813/signatures/SaveSignature"; //await JsRuntime.InvokeAsync<string>("getStoreData", "baseUrl").ConfigureAwait(false);


            using (var client = new HttpClient())
            {

                var data = JsonConvert.DeserializeObject<UploadModel>(consentForm);
                if (data != null)
                {
                    byte[] bytes = Encoding.UTF8.GetBytes(apiKey + data.UserId);
                    using (SHA512 sha512 = SHA512.Create())
                    {
                        byte[] hashBytes = sha512.ComputeHash(bytes);
                        string hash = BitConverter.ToString(hashBytes).Replace("-", string.Empty).ToUpper();
                        var serializedData = JsonConvert.SerializeObject(data);
                        HttpContent content = new StringContent(serializedData, Encoding.UTF8, "application/json");

                        //client.DefaultRequestHeaders.Add("Access-Control-Allow-Origin", "https://localhost:7239");
                        //client.DefaultRequestHeaders.Add("ApiKey", apiKey);
                        //client.DefaultRequestHeaders.Add("Hash", hash);
                        client.DefaultRequestHeaders.Accept.Add(new MediaTypeWithQualityHeaderValue("application/json"));

                        var response = await client.PostAsync(baseUrl, content).ConfigureAwait(false);
                        if (response.IsSuccessStatusCode)
                        {
                            uploadHide = string.Empty;
                        }
                    }
                }
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }

    }

    private async Task DeleteLocalStorageAndReload()
    {

        await JsRuntime.InvokeVoidAsync("blazorLocalStorage.deleteItem", "storeBaseUrl");
        // Alternatively, to clear the entire local storage, use:
        // await JSRuntime.InvokeVoidAsync("blazorLocalStorage.clear");
        await JsRuntime.InvokeVoidAsync("location.reload");
    }



}


