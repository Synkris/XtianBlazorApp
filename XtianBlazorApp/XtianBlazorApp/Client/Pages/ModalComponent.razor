@page "/ModalComponent"
@inject IJSRuntime JSRuntime
@inject XtianBlazorApp.Shared.ViewModels.StateContainer stateContainer

@using System.Text.Json;
@using XtianBlazorApp.Client.Helpers;
@using XtianBlazorApp.Shared.ViewModels;
@using System.Text;
@using System.Security.Cryptography;
@using System.Net.Http.Headers;

<style>
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
    }

    .modal-dialog {
        width: 500px;
        background-color: #fff;
        border-radius: 4px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.3);
    }

    .modal-content {
        padding: 16px;
    }

    .modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding-bottom: 8px;
        border-bottom: 1px solid #ccc;
    }

    .modal-title {
        margin: 0;
    }

    .modal-body {
        padding: 8px 0;
        text-align: center;
    }

    .modal-footer {
        display: flex;
        justify-content: center;
        margin-top: 16px;
    }
</style>

<div class="modal" style="display: @(IsVisible ? "block" : "none")">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">@Title</h5>
                <a type="button" class="close" @onclick="CancelModal">
                    <span aria-hidden="true">&times;</span>
                </a>
            </div>
            <div class="modal-body">
                @ChildContent
            </div>
            <div class="modal-footer">
                <div class="row">
                    <div class="col-6">
                        <a @onclick="CancelModal" type="button" class="btn btn-secondary">Cancel</a>
                    </div>
                    <div class="col-6">
                        <a type="button" class="btn btn-primary" @onclick="YesModal">Yes</a>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


@code
{
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public string Title { get; set; } = string.Empty;
    [Parameter] public RenderFragment? ChildContent { get; set; }

    private void CancelModal()
    {
        IsVisible = false;
    }

    private async Task ClearDraftList()
    {
        await JSRuntime.InvokeVoidAsync("removeFromLocalStorage", "draftDetentionDetails");
        await JSRuntime.InvokeVoidAsync("removeFromLocalStorage", "consentForm");
        await JSRuntime.InvokeVoidAsync("removeFromLocalStorage", "userData");
        await JSRuntime.InvokeVoidAsync("refreshComponent");
    }

    private async Task YesModal()
    {
        IsVisible = false;
        var offlineDetails = await JSRuntime.InvokeAsync<string>("getStoreData", "draftDetentionDetails").ConfigureAwait(false);
        if (offlineDetails != null)
        {
            var allDrafts = JsonSerializer.Deserialize<List<UploadModel>>(offlineDetails);
            if (allDrafts != null && allDrafts.Count() != 0)
            {
                allDrafts.Clear();
                await ClearDraftList();
            }
        }
    }


}
